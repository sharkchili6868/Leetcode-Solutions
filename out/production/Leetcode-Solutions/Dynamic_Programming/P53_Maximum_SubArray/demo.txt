Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum
and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Demo:

Do Not think Two Much!!!

Let's take this sample input as an example.

[-2 , 1 , -3 , 4 , -1 , 2 , 1 , -5 ,4]
 | |
We will have two invisible bars to extract the subarray (contiguous) as a demonstrated above.
We will also have a max variable to keep track of the largest sum of a subarray. The key point is how
to move our bars, aka pointers.
We will initialize our max to be the first element of the array, say max = -2 right now.
The following is the work flow

max = -2
[-2 , 1 , -3 , 4 , -1 , 2 , 1 , -5 ,4]
 |    f

max = 1
[-2 , 1 , -3 , 4 , -1 , 2 , 1 , -5 ,4]
      |    f

max = 1
[-2 , 1 , -2 , 4 , -1 , 2 , 1 , -5 ,4]
      |        f

max = 4
[-2 , 1 , -3 , 4 , -1 , 2 , 1 , -5 ,4]
               |    f

max = 3
[-2 , 1 , -3 , 4 , 3 , 2 , 1 , -5 ,4]
               |       f

max = 5
[-2 , 1 , -3 , 4 , 3 , 5 , 1 , -5 ,4]
               |           f

max = 6
[-2 , 1 , -3 , 4 , 3 , 5 , 6 , -5 ,4]
               |                f

max = 6
[-2 , 1 , -3 , 4 , 3 , 5 , 6 , 1 ,4]
               |                  f

max = 6
[-2 , 1 , -3 , 4 , 3 , 5 , 6 , 1 ,5]
               |                  f